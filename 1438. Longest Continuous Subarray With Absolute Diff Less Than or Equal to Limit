import java.util.Deque;
import java.util.LinkedList;

class Solution {
  public int longestSubarray(int[] nums, int limit) {
    int maxLength = 1;
    Deque<Integer> minDeque = new LinkedList<>();
    Deque<Integer> maxDeque = new LinkedList<>();

    for (int left = 0, right = 0; right < nums.length; ++right) {
      while (!minDeque.isEmpty() && minDeque.peekLast() > nums[right])
        minDeque.pollLast();
      minDeque.addLast(nums[right]);

      while (!maxDeque.isEmpty() && maxDeque.peekLast() < nums[right])
        maxDeque.pollLast();
      maxDeque.addLast(nums[right]);

      while (maxDeque.peekFirst() - minDeque.peekFirst() > limit) {
        if (minDeque.peekFirst() == nums[left])
          minDeque.pollFirst();
        if (maxDeque.peekFirst() == nums[left])
          maxDeque.pollFirst();
        ++left;
      }

      maxLength = Math.max(maxLength, right - left + 1);
    }

    return maxLength;
  }
}
