 import java.util.*;

class Solution {
  public int maximumSafenessFactor(List<List<Integer>> grid) {
    int n = grid.size();
    int[][] distToThief = getDistToThief(grid);
    int l = 0, r = n * 2;

    while (l < r) {
      int m = (l + r) / 2;
      if (hasValidPath(distToThief, m))
        l = m + 1;
      else
        r = m;
    }

    return l - 1;
  }

  private static final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

  private boolean hasValidPath(int[][] distToThief, int safeness) {
    int n = distToThief.length;
    if (distToThief[0][0] < safeness) return false;

    Queue<int[]> queue = new ArrayDeque<>();
    boolean[][] seen = new boolean[n][n];
    queue.offer(new int[]{0, 0});
    seen[0][0] = true;

    while (!queue.isEmpty()) {
      int[] cell = queue.poll();
      int i = cell[0], j = cell[1];
      if (i == n - 1 && j == n - 1) return true;

      for (int[] dir : dirs) {
        int x = i + dir[0], y = j + dir[1];
        if (x >= 0 && x < n && y >= 0 && y < n && !seen[x][y] && distToThief[x][y] >= safeness) {
          queue.offer(new int[]{x, y});
          seen[x][y] = true;
        }
      }
    }

    return false;
  }

  private int[][] getDistToThief(List<List<Integer>> grid) {
    int n = grid.size();
    int[][] distToThief = new int[n][n];
    Queue<int[]> queue = new ArrayDeque<>();
    boolean[][] seen = new boolean[n][n];

    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        if (grid.get(i).get(j) == 1) {
          queue.offer(new int[]{i, j});
          seen[i][j] = true;
        }
      }
    }

    int dist = 0;
    while (!queue.isEmpty()) {
      for (int sz = queue.size(); sz > 0; --sz) {
        int[] cell = queue.poll();
        int i = cell[0], j = cell[1];
        distToThief[i][j] = dist;
        for (int[] dir : dirs) {
          int x = i + dir[0], y = j + dir[1];
          if (x >= 0 && x < n && y >= 0 && y < n && !seen[x][y]) {
            queue.offer(new int[]{x, y});
            seen[x][y] = true;
          }
        }
      }
      dist++;
    }

    return distToThief;
  }
}

